import sys, os
import numpy as np
import h5py as h5

root_dir = p = os.path.abspath('..')
tools_dir = root_dir + '/tools/'
cloudy_tools_dir = root_dir + '/cloudy_tools/'
figures_dir = root_dir + '/figures/'
sys.path.extend([ tools_dir, cloudy_tools_dir ] )
from tools import create_directory
from load_cloudy_output import *
from load_grackle_output import *
from load_puchwein_data import *
from load_hm12_data import *


inDir_cloudy_primordial = '../cloudy_tools/data/uv_Puchwein18_primordial_lux/'
inDir_cloudy_metals = '../cloudy_tools/data/uv_Puchwein18_metals_lux/'
data_cl = load_cloudy_CoolingRates( inDir_cloudy_primordial, inDir_cloudy_metals )

#Load UVBRates
file_name = 'data/hm12.dat'
rates_hm12 = load_hm12_rates( file_name )

file_name = 'data/ionrate.out'
rates_pw = load_puchwein_rates( file_name )

data_cl = Add_UVBRates( data_cl, rates_pw )


#Load Gracke Data
file_name = 'data/CloudyData_UVB=HM2012.h5'
data_gk = load_grackle_dataset( file_name )


types = ['Primordial', 'Metals']

#Set the output file
file_name_out = 'data/my_grackle_files/CloudyData_UVB=Puchwein2018_cloudy.h5'
file_out = h5.File( file_name_out, 'w' )

# Add Cooling Rate
root_name = 'CoolingRates'
print root_name
group_root = file_out.create_group( root_name )
for type in types:
  print ' ' + type
  group_gk = data_gk[root_name][type]
  group_cl = data_cl[root_name][type]
  group_out = group_root.create_group(type)
  keys = group_gk.keys()
  for key in keys:
    print '  ' + key
    data_set_gk = group_gk[key]
    table_gk = data_set_gk['data']    
    data_set_cl = group_cl[key]
    table_cl = data_set_cl['data']
    data_set = group_out.create_dataset( key, data=table_cl )
    attrs = data_set_gk.keys()
    for attr_key in attrs:
      if attr_key == 'data': continue
      print attr_key
      data_set.attrs[attr_key] = data_set_cl[attr_key]

# Add UVBRates

root_name = 'UVBRates'
print root_name
group_out = file_out.create_group( root_name )
for key in ['z', 'Info']:
  print ' ' + key
  data_uvb_gk = data_gk[root_name][key][...]
  data_uvb_cl = data_cl[root_name][key][...]
  # if key == 'Info': data_uvb_cl = np.array('Haardt & Madau (2012, ApJ, 746, 125) [Galaxies & Quasars]  Generated by Cloudy C17',  dtype='|S82')
  if key == 'Info': data_uvb_cl = np.array('Puchwein et al. (2018)   Generated by Cloudy C17',  dtype='|S50')
  else:
    diff = np.abs( data_uvb_cl - data_uvb_gk) 
    indx = data_uvb_gk != 0
    diff_new = diff[indx] / data_uvb_gk[indx]
    print diff_new.max()
  group_out.create_dataset( key, data=data_uvb_cl )

for key in ['Chemistry', 'Photoheating']:
  print ' ' + key
  group_gk = data_gk[root_name][key]
  group_cl = data_cl[root_name][key]
  group_out = file_out[root_name].create_group( key )
  for field in group_gk.keys():
    if field not in ['k24', 'k25', 'k26', 'piHI', 'piHeI', 'piHeII']: continue
    print field
    data_uvb_gk = group_gk[field][...]
    data_uvb_cl = group_cl[field][...]
    diff = np.abs( data_uvb_cl - data_uvb_gk) / data_uvb_gk
    print diff.max()
    group_out.create_dataset( field, data=data_uvb_cl )


file_out.close()