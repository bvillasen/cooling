import sys, os
import numpy as np
import h5py as h5

root_dir = p = os.path.abspath('..')
tools_dir = root_dir + '/tools/'
cloudy_tools_dir = root_dir + '/cloudy_tools/'
figures_dir = root_dir + '/figures/'
sys.path.extend([ tools_dir, cloudy_tools_dir ] )
from tools import create_directory
from load_puchwein_data import *
from load_hm12_data import *




#Load HM12 UVB Spectrum
file_name = 'data/uvb_HM12.dat'
uvb_spectrum_hm = {}
uvb_spectrum_hm['redshift'], uvb_spectrum_hm['lambda'], uvb_spectrum_hm['J'] = load_hm12_spectrum( file_name )
z_hm = uvb_spectrum_hm['redshift']
lambda_hm = uvb_spectrum_hm['lambda']
specta_hm = uvb_spectrum_hm['J']
n_redshift = len(z_hm)
n_lambda = len(lambda_hm)


print "HM12"
print " N redshift: ", n_redshift
print " N lambda: ", n_lambda

#Load Puchwein UVB Spectrum
uvb_spectrum_pw = {}
file_name = 'data/bkgthick.out'
uvb_spectrum_pw['redshift'], uvb_spectrum_pw['lambda'], uvb_spectrum_pw['J'] = load_puchwein_spectrum( file_name )
z_pw = uvb_spectrum_pw['redshift']
lambda_pw = uvb_spectrum_pw['lambda']
specta_pw = uvb_spectrum_pw['J']
n_redshift = len(z_pw)
n_lambda = len(lambda_pw)

print "\nPuchwein 18"
print " N redshift: ", n_redshift
print " N lambda: ", n_lambda

# Replace repeated lamdas as suggested by Francesco Haardt
for i in range(1,n_lambda):
  lambda_0 = lambda_pw[i-1]
  lambda_1 = lambda_pw[i]
  if lambda_1 - lambda_0 == 0:
    if lambda_1 < 1000: offset = 0.1
    if lambda_1 > 1000: offset = 1.0
    lambda_new = lambda_1 + offset
    if lambda_new > lambda_pw[i+1]:
      delta = lambda_pw[i+1] - lambda_pw[i] 
      lambda_new = lambda_1 + delta/10
    lambda_pw[i] = lambda_new
    # print "\nLine {0}".format(i)
    # print " Lamda 0 {0}".format( lambda_pw[i-1])
    # print " Lamda {0}  ->  {1}".format(lambda_1, lambda_pw[i] )
    # print " Lamda 1 {0} ".format(lambda_pw[i+1] )
    if lambda_pw[i] <= lambda_pw[i-1]: print "ERROR"
    if lambda_pw[i] > lambda_pw[i+1]: print "ERROR"


print '\nGenerating Cloudy table'

header_lines = [
'# The UVB spectrum (Puchwein+2018 model)',
'#',
'# 0.1000E+01',
'# 0.4000E+00 0.1300E+01 0.2000E+00 0.4400E+00 0.1700E+01 0.9000E+00',
'# 0.1200E+06 0.1000E+05 0.5000E+04 0.1300E+04',
'# 0.3000E+00 0.7000E+00 0.2260E-01 0.7000E+00',
'# 0.1000E+01',
'# Inputs/testS99_K100nSFRD.dat',   
'# Inputs/column_dist_v6_Qs.dat',           
'# 0.1000E+01',
'# 0.6900E-04 0.3967E+01 0.1800E+00',
'# 0.1000E+01',
'#',
'# Generated by Bruno Villasenor from file provided by Francesco Haardt',
'#'
]

parameters_lines = [
'20060612',
'1',
'1',
'z',
'60',
'626',
'lambda',
'1.00000000e+00',
'F_nu',
'1.00000000e+00',
]


file_name  = 'data/cloudy_spectrum/puchwein_18.ascii'
file = open( file_name, 'w' )

tab = '  '
new_line = '\n'

for line in header_lines:
  file.write(line + '\n')

for line in parameters_lines:
  file.write(tab + line + '\n')
  
n_per_line = 10  
for i,z in enumerate(z_pw):
  # if i%n_per_line == 0: file.write( tab )
  z_txt = '{0}{1:0.3e}'.format(tab, z)
  file.write( z_txt )
  if (i+1)%n_per_line == 0: file.write(new_line)
  
n_per_line = 8 
for i,lambda_val in enumerate(lambda_pw):
  added_new_line = False
  z_txt = '{0}{1:0.6e}'.format(tab, lambda_val)
  file.write( z_txt )
  if (i+1)%n_per_line == 0: 
    file.write(new_line)
    added_new_line = True
if not added_new_line: file.write(new_line)




spectra_out = specta_pw.T
n_per_line = 10

for j_row in spectra_out:
  for i,j_val in enumerate(j_row):
    added_new_line = False
    z_txt = '{0}{1:0.3e}'.format(tab, j_val)
    file.write( z_txt )
    if (i+1)%n_per_line == 0: 
      file.write(new_line)
      added_new_line = True
  if not added_new_line: file.write(new_line)

file.close()
# 
# 
# print '\nPlotting Spectra'
# 
# z_vals = [ 1.1, 3.6, 4.9, 6.9, 9.1, 11.2  ]
# indxs_pw, indxs_hm = [], []
# for z in z_vals:
#   diff = np.abs(uvb_spectrum_pw['redshift'] - z)
#   indx = np.where( diff == diff.min())[0]
#   indxs_pw.append(indx[0])
# 
#   diff = np.abs(uvb_spectrum_hm['redshift'] - z)
#   indx = np.where( diff == diff.min())[0]
#   indxs_hm.append(indx[0])
# 
# n_rows = 3
# n_cols =  2
# fig, ax_list = plt.subplots(nrows=n_rows, ncols=n_cols, figsize=(10*n_cols,9.2*n_rows))
# plt.subplots_adjust(  wspace=0.3, hspace=0.3)
# ax_list = ax_list.flatten()
# 
# fs = 22
# for i in range( n_rows*n_cols):
# 
#   indx_pw = indxs_pw[i]
#   indx_hm = indxs_hm[i]
# 
#   z_hm = uvb_spectrum_hm['redshift'][indx_hm]
#   z_pw = uvb_spectrum_pw['redshift'][indx_pw]
#   if np.abs( z_hm - z_pw ) > 1e-4: print "ERROR: redshift missmatch"
# 
#   ax = ax_list[i]
#   ax.plot( uvb_spectrum_hm['lambda'], uvb_spectrum_hm['J'][:,indx_hm], label='HM12' ) 
#   ax.plot( uvb_spectrum_pw['lambda'], uvb_spectrum_pw['J'][:,indx_pw], label='Puchwein+18' )
#   ax.legend( fontsize = 18 )
#   text = 'z = {0:.1f}'.format( z_hm )
#   ax.text(0.2, 0.8, text, fontsize=fs, horizontalalignment='right', verticalalignment='center', transform=ax.transAxes,)
# 
#   ax.set_xscale('log')
#   ax.set_yscale('log')
#   ax.set_ylim( 1e-30, 1e-18)
#   ax.set_xlim( 5, 5e3)
# 
#   ax.set_ylabel( r'$J \,\, [\mathrm{erg} \,\, \mathrm{cm}^{-2} \,\, \mathrm{s}^{-1} \,\, \mathrm{Hz}^{-1}  \,\, \mathrm{sr}^{-1}]$', fontsize=fs)
#   ax.set_xlabel( r'$\lambda \,\, [\AA]$', fontsize=fs)
# 
#   ax.tick_params(axis='both', which='major', labelsize=18, size=5)
#   ax.tick_params(axis='both', which='minor', labelsize=15, size=3)
# 
# fig.savefig( 'figures/ubv_comparison_new.png',  bbox_inches='tight', dpi=100 )
